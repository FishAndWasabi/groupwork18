#include <linux/init.h>
#include <linux/list.h>
#include <linux/module.h>
#include <linux/memory.h>

#include <trace/syscall.h>



int ftrace_arch_code_modify_prepare(void)
{
	mutex_lock(&text_mutex);
	set_kernel_text_rw();
	set_all_modules_text_rw();
	return 0;

int ftrace_arch_code_modify_post_process(void){
	set_all_modules_text_ro();
	set_kernel_text_ro();
	mutex_unlock(&text_mutex);
	return 0;
}


#include <linux/hash.h>
#include <linux/rcupdate.h>
#include <linux/kprobes.h>
#include <linux/memory.h>

#include <trace/events/sched.h>


static void ftrace_run_update_code(int command){
	int ret;

	mutex_lock(&text_mutex);

	ret = ftrace_arch_code_modify_prepare();
	FTRACE_WARN_ON(ret);
	if (ret)
		goto out_unlock;
		return;

	/*
	 * By default we use stop_machine() to modify the code.

static void ftrace_run_update_code(int command)
	ret = ftrace_arch_code_modify_post_process();
	FTRACE_WARN_ON(ret);

out_unlock:
	mutex_unlock(&text_mutex);
}

static void ftrace_run_modify_code(struct ftrace_ops *ops, int command,

void ftrace_module_enable(struct module *mod)	struct ftrace_page *pg;

	mutex_lock(&ftrace_lock);
	mutex_lock(&text_mutex);

	if (ftrace_disabled)
		goto out_unlock;

void ftrace_module_enable(struct module *mod)		ftrace_arch_code_modify_post_process();

 out_unlock:
	mutex_unlock(&text_mutex);
	mutex_unlock(&ftrace_lock);

	process_cached_mods(mod->name);


