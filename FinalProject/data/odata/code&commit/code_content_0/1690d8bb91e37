static int scmi_cpufreq_init(struct cpufreq_policy *policy)out_free_priv:
	kfree(priv);
out_free_opp:
	dev_pm_opp_cpumask_remove_table(policy->cpus);
	dev_pm_opp_remove_all_dynamic(cpu_dev);

	return ret;
}

static int scmi_cpufreq_exit(struct cpufreq_policy *policy)	cpufreq_cooling_unregister(priv->cdev);
	dev_pm_opp_free_cpufreq_table(priv->cpu_dev, &policy->freq_table);
	kfree(priv);
	dev_pm_opp_cpumask_remove_table(policy->related_cpus);
	dev_pm_opp_remove_all_dynamic(priv->cpu_dev);

	return 0;
}

static int scpi_cpufreq_init(struct cpufreq_policy *policy)out_free_priv:
	kfree(priv);
out_free_opp:
	dev_pm_opp_cpumask_remove_table(policy->cpus);
	dev_pm_opp_remove_all_dynamic(cpu_dev);

	return ret;
}

static int scpi_cpufreq_exit(struct cpufreq_policy *policy)	clk_put(priv->clk);
	dev_pm_opp_free_cpufreq_table(priv->cpu_dev, &policy->freq_table);
	kfree(priv);
	dev_pm_opp_cpumask_remove_table(policy->related_cpus);
	dev_pm_opp_remove_all_dynamic(priv->cpu_dev);

	return 0;
}

void _opp_free(struct dev_pm_opp *opp)	kfree(opp);
}

static void _opp_kref_release(struct kref *kref)
static void _opp_kref_release(struct dev_pm_opp *opp,
			      struct opp_table *opp_table)
{
	struct dev_pm_opp *opp = container_of(kref, struct dev_pm_opp, kref);
	struct opp_table *opp_table = opp->opp_table;

	/*
	 * Notify the changes in the availability of the operable
	 * frequency/voltage list.

static void _opp_kref_release(struct kref *kref)	opp_debug_remove_one(opp);
	list_del(&opp->node);
	kfree(opp);
}

static void _opp_kref_release_unlocked(struct kref *kref)
{
	struct dev_pm_opp *opp = container_of(kref, struct dev_pm_opp, kref);
	struct opp_table *opp_table = opp->opp_table;

	_opp_kref_release(opp, opp_table);
}

static void _opp_kref_release_locked(struct kref *kref)
{
	struct dev_pm_opp *opp = container_of(kref, struct dev_pm_opp, kref);
	struct opp_table *opp_table = opp->opp_table;

	_opp_kref_release(opp, opp_table);
	mutex_unlock(&opp_table->lock);
}


void dev_pm_opp_get(struct dev_pm_opp *opp)
void dev_pm_opp_put(struct dev_pm_opp *opp)
{
	kref_put_mutex(&opp->kref, _opp_kref_release, &opp->opp_table->lock);
	kref_put_mutex(&opp->kref, _opp_kref_release_locked,
		       &opp->opp_table->lock);
}
EXPORT_SYMBOL_GPL(dev_pm_opp_put);

static void dev_pm_opp_put_unlocked(struct dev_pm_opp *opp)
{
	kref_put(&opp->kref, _opp_kref_release_unlocked);
}

/**
 * dev_pm_opp_remove()  - Remove an OPP from OPP table
 * @dev:	device for which we do this operation

void dev_pm_opp_remove(struct device *dev, unsigned long freq)}
EXPORT_SYMBOL_GPL(dev_pm_opp_remove);

/**
 * dev_pm_opp_remove_all_dynamic() - Remove all dynamically created OPPs
 * @dev:	device for which we do this operation
 *
 * This function removes all dynamically created OPPs from the opp table.
 */
void dev_pm_opp_remove_all_dynamic(struct device *dev)
{
	struct opp_table *opp_table;
	struct dev_pm_opp *opp, *temp;
	int count = 0;

	opp_table = _find_opp_table(dev);
	if (IS_ERR(opp_table))
		return;

	mutex_lock(&opp_table->lock);
	list_for_each_entry_safe(opp, temp, &opp_table->opp_list, node) {
		if (opp->dynamic) {
			dev_pm_opp_put_unlocked(opp);
			count++;
		}
	}
	mutex_unlock(&opp_table->lock);

	/* Drop the references taken by dev_pm_opp_add() */
	while (count--)
		dev_pm_opp_put_opp_table(opp_table);

	/* Drop the reference taken by _find_opp_table() */
	dev_pm_opp_put_opp_table(opp_table);
}
EXPORT_SYMBOL_GPL(dev_pm_opp_remove_all_dynamic);

struct dev_pm_opp *_opp_allocate(struct opp_table *table)
{
	struct dev_pm_opp *opp;

void dev_pm_opp_put(struct dev_pm_opp *opp);int dev_pm_opp_add(struct device *dev, unsigned long freq,
		   unsigned long u_volt);
void dev_pm_opp_remove(struct device *dev, unsigned long freq);
void dev_pm_opp_remove_all_dynamic(struct device *dev);

int dev_pm_opp_enable(struct device *dev, unsigned long freq);


static inline void dev_pm_opp_remove(struct device *dev, unsigned long freq){
}

static inline void dev_pm_opp_remove_all_dynamic(struct device *dev)
{
}

static inline int dev_pm_opp_enable(struct device *dev, unsigned long freq)
{
	return 0;


