# SPDX-License-Identifier: GPL-2.0
menuconfig MOST
        tristate "MOST support"
	depends on HAS_DMA
	depends on HAS_DMA && CONFIGFS_FS
        default n
        ---help---
	  Say Y here if you want to enable MOST support.

# SPDX-License-Identifier: GPL-2.0
obj-$(CONFIG_MOST) += most_core.o
most_core-y := core.o
most_core-y += configfs.o
ccflags-y += -I $(srctree)/drivers/staging/

obj-$(CONFIG_MOST_CDEV)	+= cdev/

static int __init mod_init(void)	err = most_register_component(&comp.cc);
	if (err)
		goto free_cdev;
	err = most_register_configfs_subsys(&comp.cc);
	if (err)
		goto deregister_comp;
	return 0;

deregister_comp:
	most_deregister_component(&comp.cc);
free_cdev:
	unregister_chrdev_region(comp.devno, CHRDEV_REGION_SIZE);
dest_ida:

static void __exit mod_exit(void)
	pr_info("exit module\n");

	most_deregister_configfs_subsys(&comp.cc);
	most_deregister_component(&comp.cc);

	list_for_each_entry_safe(c, tmp, &channel_list, list) {

static int __init most_init(void)		err = -ENOMEM;
		goto err_unregister_driver;
	}

	configfs_init();
	return 0;

err_unregister_driver:

static struct core_component comp = {
static int __init audio_init(void)
{
	int ret;

	pr_info("init()\n");

	INIT_LIST_HEAD(&adpt_list);

	return most_register_component(&comp);
	ret = most_register_component(&comp);
	if (ret)
		pr_err("Failed to register %s\n", comp.name);
	ret = most_register_configfs_subsys(&comp);
	if (ret)
		pr_err("Failed to register %s configfs subsys\n", comp.name);
	return ret;
}

static void __exit audio_exit(void)
{
	pr_info("exit()\n");
	most_deregister_configfs_subsys(&comp);
	most_deregister_component(&comp);
}



