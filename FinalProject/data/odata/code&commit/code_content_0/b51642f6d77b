int br_setlink(struct net_device *dev, struct nlmsghdr *nlh)	struct nlattr *tb[IFLA_BRPORT_MAX];
	int err;

	if (!capable(CAP_NET_ADMIN))
		return -EPERM;

	ifm = nlmsg_data(nlh);

	protinfo = nlmsg_find_attr(nlh, sizeof(*ifm), IFLA_PROTINFO);

static int fib_nl_newrule(struct sk_buff *skb, struct nlmsghdr* nlh, void *arg)	struct nlattr *tb[FRA_MAX+1];
	int err = -EINVAL, unresolved = 0;

	if (!capable(CAP_NET_ADMIN))
		return -EPERM;

	if (nlh->nlmsg_len < nlmsg_msg_size(sizeof(*frh)))
		goto errout;


static int fib_nl_delrule(struct sk_buff *skb, struct nlmsghdr* nlh, void *arg)	struct nlattr *tb[FRA_MAX+1];
	int err = -EINVAL;

	if (!capable(CAP_NET_ADMIN))
		return -EPERM;

	if (nlh->nlmsg_len < nlmsg_msg_size(sizeof(*frh)))
		goto errout;


static int neigh_delete(struct sk_buff *skb, struct nlmsghdr *nlh, void *arg)	struct net_device *dev = NULL;
	int err = -EINVAL;

	if (!capable(CAP_NET_ADMIN))
		return -EPERM;

	ASSERT_RTNL();
	if (nlmsg_len(nlh) < sizeof(*ndm))
		goto out;

static int neigh_add(struct sk_buff *skb, struct nlmsghdr *nlh, void *arg)	struct net_device *dev = NULL;
	int err;

	if (!capable(CAP_NET_ADMIN))
		return -EPERM;

	ASSERT_RTNL();
	err = nlmsg_parse(nlh, sizeof(*ndm), tb, NDA_MAX, NULL);
	if (err < 0)

static int neightbl_set(struct sk_buff *skb, struct nlmsghdr *nlh, void *arg)	struct nlattr *tb[NDTA_MAX+1];
	int err;

	if (!capable(CAP_NET_ADMIN))
		return -EPERM;

	err = nlmsg_parse(nlh, sizeof(*ndtmsg), tb, NDTA_MAX,
			  nl_neightbl_policy);
	if (err < 0)

static int do_setlink(struct net_device *dev, struct ifinfomsg *ifm,			err = PTR_ERR(net);
			goto errout;
		}
		if (!ns_capable(net->user_ns, CAP_NET_ADMIN)) {
			err = -EPERM;
			goto errout;
		}
		err = dev_change_net_namespace(dev, net, ifname);
		put_net(net);
		if (err)

static int rtnl_setlink(struct sk_buff *skb, struct nlmsghdr *nlh, void *arg)	struct nlattr *tb[IFLA_MAX+1];
	char ifname[IFNAMSIZ];

	if (!capable(CAP_NET_ADMIN))
		return -EPERM;

	err = nlmsg_parse(nlh, sizeof(*ifm), tb, IFLA_MAX, ifla_policy);
	if (err < 0)
		goto errout;

static int rtnl_dellink(struct sk_buff *skb, struct nlmsghdr *nlh, void *arg)	int err;
	LIST_HEAD(list_kill);

	if (!capable(CAP_NET_ADMIN))
		return -EPERM;

	err = nlmsg_parse(nlh, sizeof(*ifm), tb, IFLA_MAX, ifla_policy);
	if (err < 0)
		return err;

static int rtnl_newlink(struct sk_buff *skb, struct nlmsghdr *nlh, void *arg)	struct nlattr *linkinfo[IFLA_INFO_MAX+1];
	int err;

	if (!capable(CAP_NET_ADMIN))
		return -EPERM;

#ifdef CONFIG_MODULES
replay:
#endif

static int inet_rtm_deladdr(struct sk_buff *skb, struct nlmsghdr *nlh, void *arg
	ASSERT_RTNL();

	if (!capable(CAP_NET_ADMIN))
		return -EPERM;

	err = nlmsg_parse(nlh, sizeof(*ifm), tb, IFA_MAX, ifa_ipv4_policy);
	if (err < 0)
		goto errout;

static int inet_rtm_newaddr(struct sk_buff *skb, struct nlmsghdr *nlh, void *arg
	ASSERT_RTNL();

	if (!capable(CAP_NET_ADMIN))
		return -EPERM;

	ifa = rtm_to_ifaddr(net, nlh);
	if (IS_ERR(ifa))
		return PTR_ERR(ifa);

static int inet_rtm_delroute(struct sk_buff *skb, struct nlmsghdr *nlh, void *ar	struct fib_table *tb;
	int err;

	if (!capable(CAP_NET_ADMIN))
		return -EPERM;

	err = rtm_to_fib_config(net, skb, nlh, &cfg);
	if (err < 0)
		goto errout;

static int inet_rtm_newroute(struct sk_buff *skb, struct nlmsghdr *nlh, void *ar	struct fib_table *tb;
	int err;

	if (!capable(CAP_NET_ADMIN))
		return -EPERM;

	err = rtm_to_fib_config(net, skb, nlh, &cfg);
	if (err < 0)
		goto errout;

inet6_rtm_deladdr(struct sk_buff *skb, struct nlmsghdr *nlh, void *arg)	struct in6_addr *pfx;
	int err;

	if (!capable(CAP_NET_ADMIN))
		return -EPERM;

	err = nlmsg_parse(nlh, sizeof(*ifm), tb, IFA_MAX, ifa_ipv6_policy);
	if (err < 0)
		return err;

inet6_rtm_newaddr(struct sk_buff *skb, struct nlmsghdr *nlh, void *arg)	u8 ifa_flags;
	int err;

	if (!capable(CAP_NET_ADMIN))
		return -EPERM;

	err = nlmsg_parse(nlh, sizeof(*ifm), tb, IFA_MAX, ifa_ipv6_policy);
	if (err < 0)
		return err;

static int ip6addrlbl_newdel(struct sk_buff *skb, struct nlmsghdr *nlh,	u32 label;
	int err = 0;

	if (!capable(CAP_NET_ADMIN))
		return -EPERM;

	err = nlmsg_parse(nlh, sizeof(*ifal), tb, IFAL_MAX, ifal_policy);
	if (err < 0)
		return err;

static int inet6_rtm_delroute(struct sk_buff *skb, struct nlmsghdr* nlh, void *a	struct fib6_config cfg;
	int err;

	if (!capable(CAP_NET_ADMIN))
		return -EPERM;

	err = rtm_to_fib6_config(skb, nlh, &cfg);
	if (err < 0)
		return err;

static int inet6_rtm_newroute(struct sk_buff *skb, struct nlmsghdr* nlh, void *a	struct fib6_config cfg;
	int err;

	if (!capable(CAP_NET_ADMIN))
		return -EPERM;

	err = rtm_to_fib6_config(skb, nlh, &cfg);
	if (err < 0)
		return err;


