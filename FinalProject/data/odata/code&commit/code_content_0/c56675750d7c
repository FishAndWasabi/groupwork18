struct page *init_inode_metadata(struct inode *inode, struct inode *dir,		page = get_node_page(F2FS_I_SB(dir), inode->i_ino);
		if (IS_ERR(page))
			return page;

		set_cold_node(inode, page);
	}

	if (new_name) {

void update_inode(struct inode *inode, struct page *node_page)	}

	__set_inode_rdev(inode, ri);
	set_cold_node(inode, node_page);

	/* deleted inode */
	if (inode->i_nlink == 0)

struct page *new_node_page(struct dnode_of_data *dn, unsigned int ofs)
	f2fs_wait_on_page_writeback(page, NODE, true);
	fill_node_footer(page, dn->nid, dn->inode->i_ino, ofs, true);
	set_cold_node(dn->inode, page);
	set_cold_node(page, S_ISDIR(dn->inode->i_mode));
	if (!PageUptodate(page))
		SetPageUptodate(page);
	if (set_page_dirty(page))

int recover_inode_page(struct f2fs_sb_info *sbi, struct page *page)	if (!PageUptodate(ipage))
		SetPageUptodate(ipage);
	fill_node_footer(ipage, ino, ino, 0, true);
	set_cold_node(page, false);

	src = F2FS_INODE(page);
	dst = F2FS_INODE(ipage);

static inline void clear_inline_node(struct page *page)	ClearPageChecked(page);
}

static inline void set_cold_node(struct inode *inode, struct page *page)
static inline void set_cold_node(struct page *page, bool is_dir)
{
	struct f2fs_node *rn = F2FS_NODE(page);
	unsigned int flag = le32_to_cpu(rn->footer.flag);

	if (S_ISDIR(inode->i_mode))
	if (is_dir)
		flag &= ~(0x1 << COLD_BIT_SHIFT);
	else
		flag |= (0x1 << COLD_BIT_SHIFT);


