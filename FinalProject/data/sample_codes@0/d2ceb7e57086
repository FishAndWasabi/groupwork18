static void nfs_grow_file(struct page *page, unsigned int offset, unsigned int c}

/* A writeback failed: mark the page as bad, and invalidate the page cache */
static void nfs_set_pageerror(struct page *page)
static void nfs_set_pageerror(struct address_space *mapping)
{
	nfs_zap_mapping(page_file_mapping(page)->host, page_file_mapping(page));
	nfs_zap_mapping(mapping->host, mapping);
}

/*

static void nfs_write_completion(struct nfs_pgio_header *hdr)		nfs_list_remove_request(req);
		if (test_bit(NFS_IOHDR_ERROR, &hdr->flags) &&
		    (hdr->good_bytes < bytes)) {
			nfs_set_pageerror(req->wb_page);
			nfs_set_pageerror(page_file_mapping(req->wb_page));
			nfs_context_set_write_error(req->wb_context, hdr->error);
			goto remove_req;
		}

int nfs_updatepage(struct file *file, struct page *page,		unsigned int offset, unsigned int count)
{
	struct nfs_open_context *ctx = nfs_file_open_context(file);
	struct inode	*inode = page_file_mapping(page)->host;
	struct address_space *mapping = page_file_mapping(page);
	struct inode	*inode = mapping->host;
	int		status = 0;

	nfs_inc_stats(inode, NFSIOS_VFSUPDATEPAGE);

int nfs_updatepage(struct file *file, struct page *page,
	status = nfs_writepage_setup(ctx, page, offset, count);
	if (status < 0)
		nfs_set_pageerror(page);
		nfs_set_pageerror(mapping);
	else
		__set_page_dirty_nobuffers(page);
out:


