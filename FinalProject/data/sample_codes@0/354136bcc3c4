void batadv_interface_rx(struct net_device *soft_iface, */
void batadv_softif_vlan_free_ref(struct batadv_softif_vlan *vlan)
{
	if (!vlan)
		return;

	if (atomic_dec_and_test(&vlan->refcount)) {
		spin_lock_bh(&vlan->bat_priv->softif_vlan_list_lock);
		hlist_del_rcu(&vlan->list);

bool batadv_tt_local_add(struct net_device *soft_iface, const uint8_t *addr,
	/* increase the refcounter of the related vlan */
	vlan = batadv_softif_vlan_get(bat_priv, vid);
	if (WARN(!vlan, "adding TT local entry %pM to non-existent VLAN %d",
		 addr, BATADV_PRINT_VID(vid)))
		goto out;

	batadv_dbg(BATADV_DBG_TT, bat_priv,
		   "Creating new local tt entry: %pM (vid: %d, ttvn: %d)\n",

uint16_t batadv_tt_local_remove(struct batadv_priv *bat_priv,
	/* decrease the reference held for this vlan */
	vlan = batadv_softif_vlan_get(bat_priv, vid);
	if (!vlan)
		goto out;

	batadv_softif_vlan_free_ref(vlan);
	batadv_softif_vlan_free_ref(vlan);


static void batadv_tt_local_table_free(struct batadv_priv *bat_priv)			/* decrease the reference held for this vlan */
			vlan = batadv_softif_vlan_get(bat_priv,
						      tt_common_entry->vid);
			batadv_softif_vlan_free_ref(vlan);
			batadv_softif_vlan_free_ref(vlan);
			if (vlan) {
				batadv_softif_vlan_free_ref(vlan);
				batadv_softif_vlan_free_ref(vlan);
			}

			batadv_tt_local_entry_free_ref(tt_local);
		}

static void batadv_tt_local_purge_pending_clients(struct batadv_priv *bat_priv)
			/* decrease the reference held for this vlan */
			vlan = batadv_softif_vlan_get(bat_priv, tt_common->vid);
			batadv_softif_vlan_free_ref(vlan);
			batadv_softif_vlan_free_ref(vlan);
			if (vlan) {
				batadv_softif_vlan_free_ref(vlan);
				batadv_softif_vlan_free_ref(vlan);
			}

			batadv_tt_local_entry_free_ref(tt_local);
		}


