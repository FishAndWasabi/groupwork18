struct local_ports {	int		range[2];
};

struct ping_group_range {
	seqlock_t	lock;
	kgid_t		range[2];
};

struct netns_ipv4 {
#ifdef CONFIG_SYSCTL
	struct ctl_table_header	*forw_hdr;

struct netns_ipv4 {	int sysctl_ip_no_pmtu_disc;
	int sysctl_ip_fwd_use_pmtu;

	kgid_t sysctl_ping_group_range[2];
	struct ping_group_range ping_group_range;

	atomic_t dev_addr_genid;


static __net_init int inet_init_net(struct net *net)	seqlock_init(&net->ipv4.ip_local_ports.lock);
	net->ipv4.ip_local_ports.range[0] =  32768;
	net->ipv4.ip_local_ports.range[1] =  61000;

	seqlock_init(&net->ipv4.ping_group_range.lock);
	/*
	 * Sane defaults - nobody may create ping sockets.
	 * Boot scripts should set this to distro-specific group.
	 */
	net->ipv4.ping_group_range.range[0] = make_kgid(&init_user_ns, 1);
	net->ipv4.ping_group_range.range[1] = make_kgid(&init_user_ns, 0);
	return 0;
}


static struct sock *ping_lookup(struct net *net, struct sk_buff *skb, u16 ident)static void inet_get_ping_group_range_net(struct net *net, kgid_t *low,
					  kgid_t *high)
{
	kgid_t *data = net->ipv4.sysctl_ping_group_range;
	kgid_t *data = net->ipv4.ping_group_range.range;
	unsigned int seq;

	do {
		seq = read_seqbegin(&net->ipv4.ip_local_ports.lock);
		seq = read_seqbegin(&net->ipv4.ping_group_range.lock);

		*low = data[0];
		*high = data[1];
	} while (read_seqretry(&net->ipv4.ip_local_ports.lock, seq));
	} while (read_seqretry(&net->ipv4.ping_group_range.lock, seq));
}



static void inet_get_ping_group_range_table(struct ctl_table *table, kgid_t *low{
	kgid_t *data = table->data;
	struct net *net =
		container_of(table->data, struct net, ipv4.sysctl_ping_group_range);
		container_of(table->data, struct net, ipv4.ping_group_range.range);
	unsigned int seq;
	do {
		seq = read_seqbegin(&net->ipv4.ip_local_ports.lock);

static void set_ping_group_range(struct ctl_table *table, kgid_t low, kgid_t hig{
	kgid_t *data = table->data;
	struct net *net =
		container_of(table->data, struct net, ipv4.sysctl_ping_group_range);
		container_of(table->data, struct net, ipv4.ping_group_range.range);
	write_seqlock(&net->ipv4.ip_local_ports.lock);
	data[0] = low;
	data[1] = high;

static struct ctl_table ipv4_net_table[] = {	},
	{
		.procname	= "ping_group_range",
		.data		= &init_net.ipv4.sysctl_ping_group_range,
		.data		= &init_net.ipv4.ping_group_range.range,
		.maxlen		= sizeof(gid_t)*2,
		.mode		= 0644,
		.proc_handler	= ipv4_ping_group_range,

static __net_init int ipv4_sysctl_init_net(struct net *net)			table[i].data += (void *)net - (void *)&init_net;
	}

	/*
	 * Sane defaults - nobody may create ping sockets.
	 * Boot scripts should set this to distro-specific group.
	 */
	net->ipv4.sysctl_ping_group_range[0] = make_kgid(&init_user_ns, 1);
	net->ipv4.sysctl_ping_group_range[1] = make_kgid(&init_user_ns, 0);

	net->ipv4.ipv4_hdr = register_net_sysctl(net, "net/ipv4", table);
	if (net->ipv4.ipv4_hdr == NULL)
		goto err_reg;


