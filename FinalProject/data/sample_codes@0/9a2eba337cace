nouveau_display_hpd_work(struct work_struct *work)	pm_runtime_get_sync(drm->dev->dev);

	drm_helper_hpd_irq_event(drm->dev);
	/* enable polling for external displays */
	drm_kms_helper_poll_enable(drm->dev);

	pm_runtime_mark_last_busy(drm->dev->dev);
	pm_runtime_put_sync(drm->dev->dev);

nouveau_display_init(struct drm_device *dev)	if (ret)
		return ret;

	/* enable polling for external displays */
	if (!dev->mode_config.poll_enabled)
		drm_kms_helper_poll_enable(dev);

	/* enable hotplug interrupts */
	list_for_each_entry(connector, &dev->mode_config.connector_list, head) {
		struct nouveau_connector *conn = nouveau_connector(connector);

nouveau_drm_load(struct drm_device *dev, unsigned long flags)		pm_runtime_allow(dev->dev);
		pm_runtime_mark_last_busy(dev->dev);
		pm_runtime_put(dev->dev);
	} else {
		/* enable polling for external displays */
		drm_kms_helper_poll_enable(dev);
	}
	return 0;


nouveau_pmops_runtime_resume(struct device *dev)
	ret = nouveau_do_resume(drm_dev, true);

	if (!drm_dev->mode_config.poll_enabled)
		drm_kms_helper_poll_enable(drm_dev);

	/* do magic */
	nvif_mask(&device->object, 0x088488, (1 << 25), (1 << 25));
	vga_switcheroo_set_dynamic_switch(pdev, VGA_SWITCHEROO_ON);


