static const char* host_info(struct Scsi_Host *host)static int slave_alloc (struct scsi_device *sdev)
{
	struct us_data *us = host_to_us(sdev->host);
	int maxp;

	/*
	 * Set the INQUIRY transfer length to 36.  We don't use any of

static int slave_alloc (struct scsi_device *sdev)	sdev->inquiry_len = 36;

	/*
	 * USB has unusual DMA-alignment requirements: Although the
	 * starting address of each scatter-gather element doesn't matter,
	 * the length of each element except the last must be divisible
	 * by the Bulk maxpacket value.  There's currently no way to
	 * express this by block-layer constraints, so we'll cop out
	 * and simply require addresses to be aligned at 512-byte
	 * boundaries.  This is okay since most block I/O involves
	 * hardware sectors that are multiples of 512 bytes in length,
	 * and since host controllers up through USB 2.0 have maxpacket
	 * values no larger than 512.
	 *
	 * But it doesn't suffice for Wireless USB, where Bulk maxpacket
	 * values can be as large as 2048.  To make that work properly
	 * will require changes to the block layer.
	 * USB has unusual scatter-gather requirements: the length of each
	 * scatterlist element except the last must be divisible by the
	 * Bulk maxpacket value.  Fortunately this value is always a
	 * power of 2.  Inform the block layer about this requirement.
	 */
	maxp = usb_maxpacket(us->pusb_dev, us->recv_bulk_pipe, 0);
	blk_queue_virt_boundary(sdev->request_queue, maxp - 1);

	/*
	 * Some host controllers may have alignment requirements.
	 * We'll play it safe by requiring 512-byte alignment always.
	 */
	blk_queue_update_dma_alignment(sdev->request_queue, (512 - 1));



