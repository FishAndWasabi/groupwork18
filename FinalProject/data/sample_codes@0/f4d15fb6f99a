The kernel interface functions are as follows:
     It returns 0 if the call was requeued and an error otherwise.

 (*) Get call RTT.

	u64 rxrpc_kernel_get_rtt(struct socket *sock, struct rxrpc_call *call);

     Get the RTT time to the peer in use by a call.  The value returned is in
     nanoseconds.

 (*) Check call still alive.

	u32 rxrpc_kernel_check_life(struct socket *sock,
				    struct rxrpc_call *call);

     This returns a number that is updated when ACKs are received from the peer
     (notably including PING RESPONSE ACKs which we can elicit by sending PING
     ACKs to see if the call still exists on the server).  The caller should
     compare the numbers of two calls to see if the call is still alive after
     waiting for a suitable interval.

     This allows the caller to work out if the server is still contactable and
     if the call is still alive on the server whilst waiting for the server to
     process a client operation.

     This function may transmit a PING ACK.


=======================
CONFIGURABLE PARAMETERS

bool rxrpc_kernel_abort_call(struct socket *, struct rxrpc_call *,void rxrpc_kernel_end_call(struct socket *, struct rxrpc_call *);
void rxrpc_kernel_get_peer(struct socket *, struct rxrpc_call *,
			   struct sockaddr_rxrpc *);
u64 rxrpc_kernel_get_rtt(struct socket *, struct rxrpc_call *);
int rxrpc_kernel_charge_accept(struct socket *, rxrpc_notify_rx_t,
			       rxrpc_user_attach_call_t, unsigned long, gfp_t);
void rxrpc_kernel_set_tx_length(struct socket *, struct rxrpc_call *, s64);

int rxrpc_kernel_retry_call(struct socket *, struct rxrpc_call *,			    struct sockaddr_rxrpc *, struct key *);
int rxrpc_kernel_check_call(struct socket *, struct rxrpc_call *,
			    enum rxrpc_call_completion *, u32 *);
u32 rxrpc_kernel_check_life(struct socket *, struct rxrpc_call *);

#endif /* _NET_RXRPC_H */

void rxrpc_kernel_end_call(struct socket *sock, struct rxrpc_call *call)}
EXPORT_SYMBOL(rxrpc_kernel_end_call);

/**
 * rxrpc_kernel_check_life - Check to see whether a call is still alive
 * @sock: The socket the call is on
 * @call: The call to check
 *
 * Allow a kernel service to find out whether a call is still alive - ie. we're
 * getting ACKs from the server.  Returns a number representing the life state
 * which can be compared to that returned by a previous call.
 *
 * If this is a client call, ping ACKs will be sent to the server to find out
 * whether it's still responsive and whether the call is still alive on the
 * server.
 */
u32 rxrpc_kernel_check_life(struct socket *sock, struct rxrpc_call *call)
{
	return call->acks_latest;
}
EXPORT_SYMBOL(rxrpc_kernel_check_life);

/**
 * rxrpc_kernel_check_call - Check a call's state
 * @sock: The socket the call is on

void rxrpc_kernel_get_peer(struct socket *sock, struct rxrpc_call *call,	*_srx = call->peer->srx;
}
EXPORT_SYMBOL(rxrpc_kernel_get_peer);

/**
 * rxrpc_kernel_get_rtt - Get a call's peer RTT
 * @sock: The socket on which the call is in progress.
 * @call: The call to query
 *
 * Get the call's peer RTT.
 */
u64 rxrpc_kernel_get_rtt(struct socket *sock, struct rxrpc_call *call)
{
	return call->peer->rtt;
}
EXPORT_SYMBOL(rxrpc_kernel_get_rtt);


