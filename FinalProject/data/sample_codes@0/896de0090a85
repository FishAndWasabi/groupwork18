static void cm_add_one(struct ib_device *ib_device)	cm_dev->going_down = 0;
	cm_dev->device = device_create(&cm_class, &ib_device->dev,
				       MKDEV(0, 0), NULL,
				       "%s", ib_device->name);
				       "%s", dev_name(&ib_device->dev));
	if (IS_ERR(cm_dev->device)) {
		kfree(cm_dev);
		return;

static struct cma_dev_port_group *to_dev_port_group(struct config_item *item)
static bool filter_by_name(struct ib_device *ib_dev, void *cookie)
{
	return !strcmp(ib_dev->name, cookie);
	return !strcmp(dev_name(&ib_dev->dev), cookie);
}

static int cma_configfs_params_get(struct config_item *item,

static struct ib_device *__ib_device_get_by_name(const char *name)	struct ib_device *device;

	list_for_each_entry(device, &device_list, core_list)
		if (!strncmp(name, device->name, IB_DEVICE_NAME_MAX))
		if (!strcmp(name, dev_name(&device->dev)))
			return device;

	return NULL;

static int alloc_name(struct ib_device *ibdev, const char *name)	list_for_each_entry(device, &device_list, core_list) {
		char buf[IB_DEVICE_NAME_MAX];

		if (sscanf(device->name, name, &i) != 1)
		if (sscanf(dev_name(&device->dev), name, &i) != 1)
			continue;
		if (i < 0 || i >= PAGE_SIZE * 8)
			continue;

static void ib_device_release(struct device *device)static int ib_device_uevent(struct device *device,
			    struct kobj_uevent_env *env)
{
	struct ib_device *dev = container_of(device, struct ib_device, dev);

	if (add_uevent_var(env, "NAME=%s", dev->name))
	if (add_uevent_var(env, "NAME=%s", dev_name(device)))
		return -ENOMEM;

	/*

struct ib_fmr_pool *ib_create_fmr_pool(struct ib_pd             *pd,	atomic_set(&pool->flush_ser, 0);
	init_waitqueue_head(&pool->force_wait);

	pool->worker = kthread_create_worker(0, "ib_fmr(%s)", device->name);
	pool->worker =
		kthread_create_worker(0, "ib_fmr(%s)", dev_name(&device->dev));
	if (IS_ERR(pool->worker)) {
		pr_warn(PFX "couldn't start cleanup kthread worker\n");
		ret = PTR_ERR(pool->worker);

static int iw_cm_map(struct iw_cm_id *cm_id, bool active)	cm_id->m_local_addr = cm_id->local_addr;
	cm_id->m_remote_addr = cm_id->remote_addr;

	memcpy(pm_reg_msg.dev_name, cm_id->device->name,
	memcpy(pm_reg_msg.dev_name, dev_name(&cm_id->device->dev),
	       sizeof(pm_reg_msg.dev_name));
	memcpy(pm_reg_msg.if_name, cm_id->device->iwcm->ifname,
	       sizeof(pm_reg_msg.if_name));

static int fill_nldev_handle(struct sk_buff *msg, struct ib_device *device){
	if (nla_put_u32(msg, RDMA_NLDEV_ATTR_DEV_INDEX, device->index))
		return -EMSGSIZE;
	if (nla_put_string(msg, RDMA_NLDEV_ATTR_DEV_NAME, device->name))
	if (nla_put_string(msg, RDMA_NLDEV_ATTR_DEV_NAME,
			   dev_name(&device->dev)))
		return -EMSGSIZE;

	return 0;

static void ib_nl_set_path_rec_attrs(struct sk_buff *skb,
	/* Construct the family header first */
	header = skb_put(skb, NLMSG_ALIGN(sizeof(*header)));
	memcpy(header->device_name, query->port->agent->device->name,
	memcpy(header->device_name, dev_name(&query->port->agent->device->dev),
	       LS_DEVICE_NAME_MAX);
	header->port_num = query->port->port_num;


static int ib_mad_agent_security_change(struct notifier_block *nb,	if (event != LSM_POLICY_CHANGE)
		return NOTIFY_DONE;

	ag->smp_allowed = !security_ib_endport_manage_subnet(ag->security,
							     ag->device->name,
							     ag->port_num);
	ag->smp_allowed = !security_ib_endport_manage_subnet(
		ag->security, dev_name(&ag->device->dev), ag->port_num);

	return NOTIFY_OK;
}

int ib_mad_agent_security_setup(struct ib_mad_agent *agent,		return 0;

	ret = security_ib_endport_manage_subnet(agent->security,
						agent->device->name,
						dev_name(&agent->device->dev),
						agent->port_num);
	if (ret)
		return ret;

static ssize_t show_ibdev(struct device *dev, struct device_attribute *attr,	if (!port)
		return -ENODEV;

	return sprintf(buf, "%s\n", port->ib_dev->name);
	return sprintf(buf, "%s\n", dev_name(&port->ib_dev->dev));
}
static DEVICE_ATTR(ibdev, S_IRUGO, show_ibdev, NULL);


static ssize_t ibdev_show(struct device *device, struct device_attribute *attr,	srcu_key = srcu_read_lock(&dev->disassociate_srcu);
	ib_dev = srcu_dereference(dev->ib_dev, &dev->disassociate_srcu);
	if (ib_dev)
		ret = sprintf(buf, "%s\n", ib_dev->name);
		ret = sprintf(buf, "%s\n", dev_name(&ib_dev->dev));
	srcu_read_unlock(&dev->disassociate_srcu, srcu_key);

	return ret;


