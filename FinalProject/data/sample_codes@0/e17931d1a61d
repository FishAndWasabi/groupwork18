struct batadv_orig_node *batadv_orig_node_new(struct batadv_priv *bat_priv,	/* extra reference for return */
	atomic_set(&orig_node->refcount, 2);

	orig_node->tt_initialised = false;
	orig_node->bat_priv = bat_priv;
	ether_addr_copy(orig_node->orig, addr);
	batadv_dat_init_orig_node_addr(orig_node);

void batadv_tt_global_del_orig(struct batadv_priv *bat_priv,		}
		spin_unlock_bh(list_lock);
	}
	orig_node->tt_initialised = false;
	orig_node->capa_initialized &= ~BATADV_ORIG_CAPA_HAS_TT;
}

static bool batadv_tt_global_to_purge(struct batadv_tt_global_entry *tt_global,

static void _batadv_tt_update_changes(struct batadv_priv *bat_priv,				return;
		}
	}
	orig_node->tt_initialised = true;
	orig_node->capa_initialized |= BATADV_ORIG_CAPA_HAS_TT;
}

static void batadv_tt_fill_gtable(struct batadv_priv *bat_priv,

static void batadv_tt_update_orig(struct batadv_priv *bat_priv,	uint8_t orig_ttvn = (uint8_t)atomic_read(&orig_node->last_ttvn);
	struct batadv_tvlv_tt_vlan_data *tt_vlan;
	bool full_table = true;
	bool has_tt_init;

	tt_vlan = (struct batadv_tvlv_tt_vlan_data *)tt_buff;
	has_tt_init = orig_node->capa_initialized & BATADV_ORIG_CAPA_HAS_TT;

	/* orig table not initialised AND first diff is in the OGM OR the ttvn
	 * increased by one -> we can apply the attached changes
	 */
	if ((!orig_node->tt_initialised && ttvn == 1) ||
	    ttvn - orig_ttvn == 1) {
	if ((!has_tt_init && ttvn == 1) || ttvn - orig_ttvn == 1) {
		/* the OGM could not contain the changes due to their size or
		 * because they have already been sent BATADV_TT_OGM_APPEND_MAX
		 * times.

static void batadv_tt_update_orig(struct batadv_priv *bat_priv,		/* if we missed more than one change or our tables are not
		 * in sync anymore -> request fresh tt data
		 */
		if (!orig_node->tt_initialised || ttvn != orig_ttvn ||
		if (!has_tt_init || ttvn != orig_ttvn ||
		    !batadv_tt_global_check_crc(orig_node, tt_vlan,
						tt_num_vlan)) {
request_table:

struct batadv_orig_bat_iv { * @last_seen: time when last packet from this node was received
 * @bcast_seqno_reset: time when the broadcast seqno window was reset
 * @capabilities: announced capabilities of this originator
 * @capa_initialized: bitfield to remember whether a capability was initialized
 * @last_ttvn: last seen translation table version number
 * @tt_buff: last tt changeset this node received from the orig node
 * @tt_buff_len: length of the last tt changeset this node received from the
 *  orig node
 * @tt_buff_lock: lock that protects tt_buff and tt_buff_len
 * @tt_initialised: bool keeping track of whether or not this node have received
 *  any translation table information from the orig node yet
 * @tt_lock: prevents from updating the table while reading it. Table update is
 *  made up by two operations (data structure update and metdata -CRC/TTVN-
 *  recalculation) and they have to be executed atomically in order to avoid

struct batadv_orig_node {	unsigned long last_seen;
	unsigned long bcast_seqno_reset;
	uint8_t capabilities;
	uint8_t capa_initialized;
	atomic_t last_ttvn;
	unsigned char *tt_buff;
	int16_t tt_buff_len;
	spinlock_t tt_buff_lock; /* protects tt_buff & tt_buff_len */
	bool tt_initialised;
	/* prevents from changing the table while reading it */
	spinlock_t tt_lock;
	DECLARE_BITMAP(bcast_bits, BATADV_TQ_LOCAL_WINDOW_SIZE);

struct batadv_orig_node { * enum batadv_orig_capabilities - orig node capabilities
 * @BATADV_ORIG_CAPA_HAS_DAT: orig node has distributed arp table enabled
 * @BATADV_ORIG_CAPA_HAS_NC: orig node has network coding enabled
 * @BATADV_ORIG_CAPA_HAS_TT: orig node has tt capability
 */
enum batadv_orig_capabilities {
	BATADV_ORIG_CAPA_HAS_DAT = BIT(0),
	BATADV_ORIG_CAPA_HAS_NC = BIT(1),
	BATADV_ORIG_CAPA_HAS_TT = BIT(2),
};

/**


