extern struct cifsFileInfo *find_writable_file(struct cifsInodeInfo *, bool);extern int cifs_get_writable_file(struct cifsInodeInfo *cifs_inode,
				  bool fsuid_only,
				  struct cifsFileInfo **ret_file);
extern int cifs_get_writable_path(struct cifs_tcon *tcon, const char *name,
				  struct cifsFileInfo **ret_file);
extern struct cifsFileInfo *find_readable_file(struct cifsInodeInfo *, bool);
extern unsigned int smbCalcSize(void *buf, struct TCP_Server_Info *server);
extern int decode_negTokenInit(unsigned char *security_blob, int length,

build_path_from_dentry_optional_prefix(struct dentry *direntry, bool prefix)	}
	rcu_read_unlock();

	full_path = kmalloc(namelen+1, GFP_KERNEL);
	full_path = kmalloc(namelen+1, GFP_ATOMIC);
	if (full_path == NULL)
		return full_path;
	full_path[namelen] = 0;	/* trailing null */

find_writable_file(struct cifsInodeInfo *cifs_inode, bool fsuid_only)	return cfile;
}

int
cifs_get_writable_path(struct cifs_tcon *tcon, const char *name,
		       struct cifsFileInfo **ret_file)
{
	struct list_head *tmp;
	struct cifsFileInfo *cfile;
	struct cifsInodeInfo *cinode;
	char *full_path;

	*ret_file = NULL;

	spin_lock(&tcon->open_file_lock);
	list_for_each(tmp, &tcon->openFileList) {
		cfile = list_entry(tmp, struct cifsFileInfo,
			     tlist);
		full_path = build_path_from_dentry(cfile->dentry);
		if (full_path == NULL) {
			spin_unlock(&tcon->open_file_lock);
			return -ENOMEM;
		}
		if (strcmp(full_path, name)) {
			kfree(full_path);
			continue;
		}

		kfree(full_path);
		cinode = CIFS_I(d_inode(cfile->dentry));
		spin_unlock(&tcon->open_file_lock);
		return cifs_get_writable_file(cinode, 0, ret_file);
	}

	spin_unlock(&tcon->open_file_lock);
	return -ENOENT;
}

static int cifs_partialpagewrite(struct page *page, unsigned from, unsigned to)
{
	struct address_space *mapping = page->mapping;

static intsmb2_compound_op(const unsigned int xid, struct cifs_tcon *tcon,
		 struct cifs_sb_info *cifs_sb, const char *full_path,
		 __u32 desired_access, __u32 create_disposition,
		 __u32 create_options, void *ptr, int command)
		 __u32 create_options, void *ptr, int command,
		 struct cifsFileInfo *cfile)
{
	int rc;
	__le16 *utf16_path = NULL;

smb2_compound_op(const unsigned int xid, struct cifs_tcon *tcon,	resp_buftype[0] = resp_buftype[1] = resp_buftype[2] = CIFS_NO_BUFFER;
	memset(rsp_iov, 0, sizeof(rsp_iov));

	/* We already have a handle so we can skip the open */
	if (cfile)
		goto after_open;

	/* Open */
	utf16_path = cifs_convert_path_to_utf16(full_path, cifs_sb);
	if (!utf16_path)
		return -ENOMEM;
	if (!utf16_path) {
		rc = -ENOMEM;
		goto finished;
	}

	oparms.tcon = tcon;
	oparms.desired_access = desired_access;

smb2_compound_op(const unsigned int xid, struct cifs_tcon *tcon,	if (rc)
		goto finished;

	smb2_set_next_command(tcon, &rqst[num_rqst++]);
	smb2_set_next_command(tcon, &rqst[num_rqst]);
 after_open:
	num_rqst++;
	rc = 0;

	/* Operation */
	switch (command) {

smb2_compound_op(const unsigned int xid, struct cifs_tcon *tcon,		size[1] = len + 2 /* null */;
		data[1] = (__le16 *)ptr;

		rc = SMB2_set_info_init(tcon, &rqst[num_rqst], COMPOUND_FID,
					COMPOUND_FID, current->tgid,
					FILE_RENAME_INFORMATION,
		if (cfile)
			rc = SMB2_set_info_init(tcon, &rqst[num_rqst],
						cfile->fid.persistent_fid,
						cfile->fid.volatile_fid,
					current->tgid, FILE_RENAME_INFORMATION,
					SMB2_O_INFO_FILE, 0, data, size);
		else {
			rc = SMB2_set_info_init(tcon, &rqst[num_rqst],
					COMPOUND_FID, COMPOUND_FID,
					current->tgid, FILE_RENAME_INFORMATION,
					SMB2_O_INFO_FILE, 0, data, size);
			smb2_set_next_command(tcon, &rqst[num_rqst]);
			smb2_set_related(&rqst[num_rqst]);
		}
		if (rc)
			goto finished;
		smb2_set_next_command(tcon, &rqst[num_rqst]);
		smb2_set_related(&rqst[num_rqst++]);
		num_rqst++;
		trace_smb3_rename_enter(xid, ses->Suid, tcon->tid, full_path);
		break;
	case SMB2_OP_HARDLINK:

smb2_compound_op(const unsigned int xid, struct cifs_tcon *tcon,	if (rc)
		goto finished;

	/* We already have a handle so we can skip the close */
	if (cfile)
		goto after_close;
	/* Close */
	memset(&close_iov, 0, sizeof(close_iov));
	rqst[num_rqst].rq_iov = close_iov;
	rqst[num_rqst].rq_nvec = 1;
	rc = SMB2_close_init(tcon, &rqst[num_rqst], COMPOUND_FID,
			     COMPOUND_FID);
	smb2_set_related(&rqst[num_rqst++]);
	smb2_set_related(&rqst[num_rqst]);
	if (rc)
		goto finished;

	rc = compound_send_recv(xid, ses, flags, num_rqst, rqst,
				resp_buftype, rsp_iov);
 after_close:
	num_rqst++;

	if (cfile) {
		cifsFileInfo_put(cfile);
		cfile = NULL;
		rc = compound_send_recv(xid, ses, flags, num_rqst - 2,
					&rqst[1], &resp_buftype[1],
					&rsp_iov[1]);
	} else
		rc = compound_send_recv(xid, ses, flags, num_rqst,
					rqst, resp_buftype,
					rsp_iov);

 finished:
	if (cfile)
		cifsFileInfo_put(cfile);

	SMB2_open_free(&rqst[0]);
	switch (command) {
	case SMB2_OP_QUERY_INFO:

smb2_query_path_info(const unsigned int xid, struct cifs_tcon *tcon,
	rc = smb2_compound_op(xid, tcon, cifs_sb, full_path,
			      FILE_READ_ATTRIBUTES, FILE_OPEN, create_options,
			      smb2_data, SMB2_OP_QUERY_INFO);
			      smb2_data, SMB2_OP_QUERY_INFO, NULL);
	if (rc == -EOPNOTSUPP) {
		*symlink = true;
		create_options |= OPEN_REPARSE_POINT;

smb2_query_path_info(const unsigned int xid, struct cifs_tcon *tcon,		rc = smb2_compound_op(xid, tcon, cifs_sb, full_path,
				      FILE_READ_ATTRIBUTES, FILE_OPEN,
				      create_options, smb2_data,
				      SMB2_OP_QUERY_INFO);
				      SMB2_OP_QUERY_INFO, NULL);
	}
	if (rc)
		goto out;

smb2_mkdir(const unsigned int xid, struct cifs_tcon *tcon, const char *name,{
	return smb2_compound_op(xid, tcon, cifs_sb, name,
				FILE_WRITE_ATTRIBUTES, FILE_CREATE,
				CREATE_NOT_FILE, NULL, SMB2_OP_MKDIR);
				CREATE_NOT_FILE, NULL, SMB2_OP_MKDIR, NULL);
}

void

smb2_mkdir_setinfo(struct inode *inode, const char *name,	data.Attributes = cpu_to_le32(dosattrs);
	tmprc = smb2_compound_op(xid, tcon, cifs_sb, name,
				 FILE_WRITE_ATTRIBUTES, FILE_CREATE,
				 CREATE_NOT_FILE, &data, SMB2_OP_SET_INFO);
				 CREATE_NOT_FILE, &data, SMB2_OP_SET_INFO,
				 NULL);
	if (tmprc == 0)
		cifs_i->cifsAttrs = dosattrs;
}

smb2_rmdir(const unsigned int xid, struct cifs_tcon *tcon, const char *name,{
	return smb2_compound_op(xid, tcon, cifs_sb, name, DELETE, FILE_OPEN,
				CREATE_NOT_FILE,
				NULL, SMB2_OP_RMDIR);
				NULL, SMB2_OP_RMDIR, NULL);
}

int

smb2_unlink(const unsigned int xid, struct cifs_tcon *tcon, const char *name,{
	return smb2_compound_op(xid, tcon, cifs_sb, name, DELETE, FILE_OPEN,
				CREATE_DELETE_ON_CLOSE | OPEN_REPARSE_POINT,
				NULL, SMB2_OP_DELETE);
				NULL, SMB2_OP_DELETE, NULL);
}

static int
smb2_set_path_attr(const unsigned int xid, struct cifs_tcon *tcon,
		   const char *from_name, const char *to_name,
		   struct cifs_sb_info *cifs_sb, __u32 access, int command)
		   struct cifs_sb_info *cifs_sb, __u32 access, int command,
		   struct cifsFileInfo *cfile)
{
	__le16 *smb2_to_name = NULL;
	int rc;

smb2_set_path_attr(const unsigned int xid, struct cifs_tcon *tcon,		goto smb2_rename_path;
	}
	rc = smb2_compound_op(xid, tcon, cifs_sb, from_name, access,
			      FILE_OPEN, 0, smb2_to_name, command);
			      FILE_OPEN, 0, smb2_to_name, command, cfile);
smb2_rename_path:
	kfree(smb2_to_name);
	return rc;

smb2_rename_path(const unsigned int xid, struct cifs_tcon *tcon,		 const char *from_name, const char *to_name,
		 struct cifs_sb_info *cifs_sb)
{
	return smb2_set_path_attr(xid, tcon, from_name, to_name, cifs_sb,
				  DELETE, SMB2_OP_RENAME);
	struct cifsFileInfo *cfile;

	cifs_get_writable_path(tcon, from_name, &cfile);

	return smb2_set_path_attr(xid, tcon, from_name, to_name,
				  cifs_sb, DELETE, SMB2_OP_RENAME, cfile);
}

int

smb2_create_hardlink(const unsigned int xid, struct cifs_tcon *tcon,		     struct cifs_sb_info *cifs_sb)
{
	return smb2_set_path_attr(xid, tcon, from_name, to_name, cifs_sb,
				  FILE_READ_ATTRIBUTES, SMB2_OP_HARDLINK);
				  FILE_READ_ATTRIBUTES, SMB2_OP_HARDLINK,
				  NULL);
}

int

smb2_set_path_size(const unsigned int xid, struct cifs_tcon *tcon,
	return smb2_compound_op(xid, tcon, cifs_sb, full_path,
				FILE_WRITE_DATA, FILE_OPEN, 0, &eof,
				SMB2_OP_SET_EOF);
				SMB2_OP_SET_EOF, NULL);
}

int

smb2_set_file_info(struct inode *inode, const char *full_path,
	rc = smb2_compound_op(xid, tlink_tcon(tlink), cifs_sb, full_path,
			      FILE_WRITE_ATTRIBUTES, FILE_OPEN, 0, buf,
			      SMB2_OP_SET_INFO);
			      SMB2_OP_SET_INFO, NULL);
	cifs_put_tlink(tlink);
	return rc;
}


