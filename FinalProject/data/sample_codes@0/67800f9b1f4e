static inline void iph_to_flow_copy_v6addrs(struct flow_keys *flow,
#if IS_ENABLED(CONFIG_IPV6)
static inline __be32 ip6_make_flowlabel(struct net *net, struct sk_buff *skb,
					__be32 flowlabel, bool autolabel)
					__be32 flowlabel, bool autolabel,
					struct flowi6 *fl6)
{
	if (!flowlabel && (autolabel || net->ipv6.sysctl.auto_flowlabels)) {
		u32 hash;

		hash = skb_get_hash(skb);
		hash = skb_get_hash_flowi6(skb, fl6);

		/* Since this is being sent on the wire obfuscate hash a bit
		 * to minimize possbility that any useful information to an

static netdev_tx_t ip6gre_xmit2(struct sk_buff *skb,	 */
	ipv6h = ipv6_hdr(skb);
	ip6_flow_hdr(ipv6h, INET_ECN_encapsulate(0, dsfield),
		     ip6_make_flowlabel(net, skb, fl6->flowlabel, false));
		     ip6_make_flowlabel(net, skb, fl6->flowlabel, false, fl6));
	ipv6h->hop_limit = tunnel->parms.hop_limit;
	ipv6h->nexthdr = proto;
	ipv6h->saddr = fl6->saddr;

static int ip6gre_header(struct sk_buff *skb, struct net_device *dev,
	ip6_flow_hdr(ipv6h, 0,
		     ip6_make_flowlabel(dev_net(dev), skb,
					t->fl.u.ip6.flowlabel, false));
					t->fl.u.ip6.flowlabel, false,
					&t->fl.u.ip6));
	ipv6h->hop_limit = t->parms.hop_limit;
	ipv6h->nexthdr = NEXTHDR_GRE;
	ipv6h->saddr = t->parms.laddr;

int ip6_xmit(struct sock *sk, struct sk_buff *skb, struct flowi6 *fl6,		hlimit = ip6_dst_hoplimit(dst);

	ip6_flow_hdr(hdr, tclass, ip6_make_flowlabel(net, skb, fl6->flowlabel,
						     np->autoflowlabel));
						     np->autoflowlabel, fl6));

	hdr->payload_len = htons(seg_len);
	hdr->nexthdr = proto;

struct sk_buff *__ip6_make_skb(struct sock *sk,
	ip6_flow_hdr(hdr, v6_cork->tclass,
		     ip6_make_flowlabel(net, skb, fl6->flowlabel,
					np->autoflowlabel));
					np->autoflowlabel, fl6));
	hdr->hop_limit = v6_cork->hop_limit;
	hdr->nexthdr = proto;
	hdr->saddr = fl6->saddr;

static int ip6_tnl_xmit2(struct sk_buff *skb,	skb_reset_network_header(skb);
	ipv6h = ipv6_hdr(skb);
	ip6_flow_hdr(ipv6h, INET_ECN_encapsulate(0, dsfield),
		     ip6_make_flowlabel(net, skb, fl6->flowlabel, false));
		     ip6_make_flowlabel(net, skb, fl6->flowlabel, false, fl6));
	ipv6h->hop_limit = t->parms.hop_limit;
	ipv6h->nexthdr = proto;
	ipv6h->saddr = fl6->saddr;


