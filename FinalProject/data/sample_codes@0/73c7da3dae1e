struct cfg80211_cached_keys; * @beacon_interval: beacon interval used on this device for transmitting
 *	beacons, 0 when not valid
 * @address: The address for this device, valid only if @netdev is %NULL
 * @p2p_started: true if this is a P2P Device that has been started
 * @nan_started: true if this is a NAN interface that has been started
 * @is_running: true if this is a non-netdev device that has been started, e.g.
 *	the P2P Device.
 * @cac_started: true if DFS channel availability check has been started
 * @cac_start_time: timestamp (jiffies) when the dfs state was entered.
 * @cac_time_ms: CAC time in ms

struct wireless_dev {
	struct mutex mtx;

	bool use_4addr, p2p_started, nan_started;
	bool use_4addr, is_running;

	u8 address[ETH_ALEN] __aligned(sizeof(u16));


static inline u8 *wdev_address(struct wireless_dev *wdev)	return wdev->address;
}

static inline bool wdev_running(struct wireless_dev *wdev)
{
	if (wdev->netdev)
		return netif_running(wdev->netdev);
	return wdev->is_running;
}

/**
 * wdev_priv - return wiphy priv from wireless_dev
 *

void cfg80211_stop_p2p_device(struct cfg80211_registered_device *rdev,	if (WARN_ON(wdev->iftype != NL80211_IFTYPE_P2P_DEVICE))
		return;

	if (!wdev->p2p_started)
	if (!wdev_running(wdev))
		return;

	rdev_stop_p2p_device(rdev, wdev);
	wdev->p2p_started = false;
	wdev->is_running = false;

	rdev->opencount--;


void cfg80211_stop_nan(struct cfg80211_registered_device *rdev,	if (WARN_ON(wdev->iftype != NL80211_IFTYPE_NAN))
		return;

	if (!wdev->nan_started)
	if (!wdev_running(wdev))
		return;

	rdev_stop_nan(rdev, wdev);
	wdev->nan_started = false;
	wdev->is_running = false;

	rdev->opencount--;
}

static int nl80211_start_p2p_device(struct sk_buff *skb, struct genl_info *info)	if (wdev->iftype != NL80211_IFTYPE_P2P_DEVICE)
		return -EOPNOTSUPP;

	if (wdev->p2p_started)
	if (wdev_running(wdev))
		return 0;

	if (rfkill_blocked(rdev->rfkill))

static int nl80211_start_p2p_device(struct sk_buff *skb, struct genl_info *info)	if (err)
		return err;

	wdev->p2p_started = true;
	wdev->is_running = true;
	rdev->opencount++;

	return 0;

static int nl80211_start_nan(struct sk_buff *skb, struct genl_info *info)	if (wdev->iftype != NL80211_IFTYPE_NAN)
		return -EOPNOTSUPP;

	if (wdev->nan_started)
	if (!wdev_running(wdev))
		return -EEXIST;

	if (rfkill_blocked(rdev->rfkill))

static int nl80211_start_nan(struct sk_buff *skb, struct genl_info *info)	if (err)
		return err;

	wdev->nan_started = true;
	wdev->is_running = true;
	rdev->opencount++;

	return 0;

static int nl80211_nan_add_func(struct sk_buff *skb,	if (wdev->iftype != NL80211_IFTYPE_NAN)
		return -EOPNOTSUPP;

	if (!wdev->nan_started)
	if (!wdev_running(wdev))
		return -ENOTCONN;

	if (!info->attrs[NL80211_ATTR_NAN_FUNC])

static int nl80211_nan_del_func(struct sk_buff *skb,	if (wdev->iftype != NL80211_IFTYPE_NAN)
		return -EOPNOTSUPP;

	if (!wdev->nan_started)
	if (!wdev_running(wdev))
		return -ENOTCONN;

	if (!info->attrs[NL80211_ATTR_COOKIE])

static int nl80211_nan_change_config(struct sk_buff *skb,	if (wdev->iftype != NL80211_IFTYPE_NAN)
		return -EOPNOTSUPP;

	if (!wdev->nan_started)
	if (!wdev_running(wdev))
		return -ENOTCONN;

	if (info->attrs[NL80211_ATTR_NAN_MASTER_PREF]) {

static int nl80211_vendor_cmd(struct sk_buff *skb, struct genl_info *info)				return -EINVAL;

			if (vcmd->flags & WIPHY_VENDOR_CMD_NEED_RUNNING) {
				if (wdev->netdev &&
				    !netif_running(wdev->netdev))
					return -ENETDOWN;
				if (!wdev->netdev && !wdev->p2p_started &&
				    !wdev->nan_started)
				if (!wdev_running(wdev))
					return -ENETDOWN;
			}


static int nl80211_vendor_cmd_dump(struct sk_buff *skb,			return -EINVAL;

		if (vcmd->flags & WIPHY_VENDOR_CMD_NEED_RUNNING) {
			if (wdev->netdev &&
			    !netif_running(wdev->netdev))
				return -ENETDOWN;
			if (!wdev->netdev && !wdev->p2p_started)
			if (!wdev_running(wdev))
				return -ENETDOWN;
		}
	}

static int nl80211_pre_doit(const struct genl_ops *ops, struct sk_buff *skb,			info->user_ptr[1] = wdev;
		}

		if (dev) {
			if (ops->internal_flags & NL80211_FLAG_CHECK_NETDEV_UP &&
			    !netif_running(dev)) {
				if (rtnl)
					rtnl_unlock();
				return -ENETDOWN;
			}
		if (ops->internal_flags & NL80211_FLAG_CHECK_NETDEV_UP &&
		    !wdev_running(wdev)) {
			if (rtnl)
				rtnl_unlock();
			return -ENETDOWN;
		}

		if (dev)
			dev_hold(dev);
		} else if (ops->internal_flags & NL80211_FLAG_CHECK_NETDEV_UP) {
			if (wdev->iftype == NL80211_IFTYPE_P2P_DEVICE &&
			    !wdev->p2p_started) {
				if (rtnl)
					rtnl_unlock();
				return -ENETDOWN;
			}
			if (wdev->iftype == NL80211_IFTYPE_NAN &&
			    !wdev->nan_started) {
				if (rtnl)
					rtnl_unlock();
				return -ENETDOWN;
			}
		}

		info->user_ptr[0] = rdev;
	}


