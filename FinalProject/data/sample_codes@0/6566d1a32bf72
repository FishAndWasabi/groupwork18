What:		/sys/class/zram-control/
Date:		August 2015
KernelVersion:	4.2
Contact:	Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
Description:
		The zram-control/ class sub-directory belongs to zram
		device class

What:		/sys/class/zram-control/hot_add
Date:		August 2015
KernelVersion:	4.2
Contact:	Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
Description:
		RO attribute. Read operation will cause zram to add a new
		device and return its device id back to user (so one can
		use /dev/zram<id>), or error code.

What:		/sys/class/zram-control/hot_remove
Date:		August 2015
KernelVersion:	4.2
Contact:	Sergey Senozhatsky <sergey.senozhatsky@gmail.com>
Description:
		WO attribute. Remove a specific /dev/zramX device, where X
		is a device_id provided by user.

size of the disk when not in use so a huge zram is wasteful.	mkfs.ext4 /dev/zram1
	mount /dev/zram1 /tmp

7) Stats:
7) Add/remove zram devices

zram provides a control interface, which enables dynamic (on-demand) device
addition and removal.

In order to add a new /dev/zramX device, perform read operation on hot_add
attribute. This will return either new device's device id (meaning that you
can use /dev/zram<id>) or error code.

Example:
	cat /sys/class/zram-control/hot_add
	1

To remove the existing /dev/zramX device (where X is a device id)
execute
	echo X > /sys/class/zram-control/hot_remove

8) Stats:
Per-device statistics are exported as various nodes under /sys/block/zram<id>/

A brief description of exported device attritbutes. For more details please

line of text and contains the following stats separated by whitespace:	zero_pages
	num_migrated

8) Deactivate:
9) Deactivate:
	swapoff /dev/zram0
	umount /dev/zram1

9) Reset:
10) Reset:
	Write any positive value to 'reset' sysfs node
	echo 1 > /sys/block/zram0/reset
	echo 1 > /sys/block/zram1/reset

#include <linux/vmalloc.h>
#include <linux/err.h>
#include <linux/idr.h>
#include <linux/sysfs.h>

#include "zram_drv.h"

static DEFINE_IDR(zram_index_idr);
/* idr index must be protected */
static DEFINE_MUTEX(zram_index_mutex);

static int zram_major;
static const char *default_compressor = "lzo";


static int zram_add(void)	return ret;
}

static void zram_remove(struct zram *zram)
static int zram_remove(struct zram *zram)
{
	pr_info("Removed device: %s\n", zram->disk->disk_name);
	struct block_device *bdev;

	bdev = bdget_disk(zram->disk, 0);
	if (!bdev)
		return -ENOMEM;

	mutex_lock(&bdev->bd_mutex);
	if (bdev->bd_openers || zram->claim) {
		mutex_unlock(&bdev->bd_mutex);
		bdput(bdev);
		return -EBUSY;
	}

	zram->claim = true;
	mutex_unlock(&bdev->bd_mutex);

	/*
	 * Remove sysfs first, so no one will perform a disksize
	 * store while we destroy the devices
	 * store while we destroy the devices. This also helps during
	 * hot_remove -- zram_reset_device() is the last holder of
	 * ->init_lock, no later/concurrent disksize_store() or any
	 * other sysfs handlers are possible.
	 */
	sysfs_remove_group(&disk_to_dev(zram->disk)->kobj,
			&zram_disk_attr_group);

	/* Make sure all the pending I/O are finished */
	fsync_bdev(bdev);
	zram_reset_device(zram);
	bdput(bdev);

	pr_info("Removed device: %s\n", zram->disk->disk_name);

	idr_remove(&zram_index_idr, zram->disk->first_minor);
	blk_cleanup_queue(zram->disk->queue);
	del_gendisk(zram->disk);
	put_disk(zram->disk);
	kfree(zram);
	return 0;
}

/* zram-control sysfs attributes */
static ssize_t hot_add_show(struct class *class,
			struct class_attribute *attr,
			char *buf)
{
	int ret;

	mutex_lock(&zram_index_mutex);
	ret = zram_add();
	mutex_unlock(&zram_index_mutex);

	if (ret < 0)
		return ret;
	return scnprintf(buf, PAGE_SIZE, "%d\n", ret);
}

static ssize_t hot_remove_store(struct class *class,
			struct class_attribute *attr,
			const char *buf,
			size_t count)
{
	struct zram *zram;
	int ret, dev_id;

	/* dev_id is gendisk->first_minor, which is `int' */
	ret = kstrtoint(buf, 10, &dev_id);
	if (ret)
		return ret;
	if (dev_id < 0)
		return -EINVAL;

	mutex_lock(&zram_index_mutex);

	zram = idr_find(&zram_index_idr, dev_id);
	if (zram)
		ret = zram_remove(zram);
	else
		ret = -ENODEV;

	mutex_unlock(&zram_index_mutex);
	return ret ? ret : count;
}

static struct class_attribute zram_control_class_attrs[] = {
	__ATTR_RO(hot_add),
	__ATTR_WO(hot_remove),
	__ATTR_NULL,
};

static struct class zram_control_class = {
	.name		= "zram-control",
	.owner		= THIS_MODULE,
	.class_attrs	= zram_control_class_attrs,
};

static int zram_remove_cb(int id, void *ptr, void *data)
{
	zram_remove(ptr);

static int zram_remove_cb(int id, void *ptr, void *data)
static void destroy_devices(void)
{
	class_unregister(&zram_control_class);
	idr_for_each(&zram_index_idr, &zram_remove_cb, NULL);
	idr_destroy(&zram_index_idr);
	unregister_blkdev(zram_major, "zram");

static int __init zram_init(void){
	int ret;

	ret = class_register(&zram_control_class);
	if (ret) {
		pr_warn("Unable to register zram-control class\n");
		return ret;
	}

	zram_major = register_blkdev(0, "zram");
	if (zram_major <= 0) {
		pr_warn("Unable to get major number\n");
		class_unregister(&zram_control_class);
		return -EBUSY;
	}

	while (num_devices != 0) {
		mutex_lock(&zram_index_mutex);
		ret = zram_add();
		mutex_unlock(&zram_index_mutex);
		if (ret < 0)
			goto out_error;
		num_devices--;


