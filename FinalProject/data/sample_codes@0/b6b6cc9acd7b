static int dwxgmac2_rss_configure(struct mac_device_info *hw,				  struct stmmac_rss *cfg, u32 num_rxq)
{
	void __iomem *ioaddr = hw->pcsr;
	u32 *key = (u32 *)cfg->key;
	int i, ret;
	u32 value;

	value = readl(ioaddr + XGMAC_RSS_CTRL);
	if (!cfg->enable) {
	if (!cfg || !cfg->enable) {
		value &= ~XGMAC_RSSE;
		writel(value, ioaddr + XGMAC_RSS_CTRL);
		return 0;
	}

	for (i = 0; i < (sizeof(cfg->key) / sizeof(u32)); i++) {
		ret = dwxgmac2_rss_write_reg(ioaddr, true, i, *key++);
		ret = dwxgmac2_rss_write_reg(ioaddr, true, i, cfg->key[i]);
		if (ret)
			return ret;
	}

static int __stmmac_test_l3filt(struct stmmac_priv *priv, u32 dst, u32 src,		return -EOPNOTSUPP;
	if (!priv->dma_cap.l3l4fnum)
		return -EOPNOTSUPP;
	if (priv->rss.enable) {
		struct stmmac_rss rss = { .enable = false, };

		stmmac_rss_configure(priv, priv->hw, &rss,
	if (priv->rss.enable)
		stmmac_rss_configure(priv, priv->hw, NULL,
				     priv->plat->rx_queues_to_use);
	}

	dissector = kzalloc(sizeof(*dissector), GFP_KERNEL);
	if (!dissector) {

static int __stmmac_test_l4filt(struct stmmac_priv *priv, u32 dst, u32 src,		return -EOPNOTSUPP;
	if (!priv->dma_cap.l3l4fnum)
		return -EOPNOTSUPP;
	if (priv->rss.enable) {
		struct stmmac_rss rss = { .enable = false, };

		stmmac_rss_configure(priv, priv->hw, &rss,
	if (priv->rss.enable)
		stmmac_rss_configure(priv, priv->hw, NULL,
				     priv->plat->rx_queues_to_use);
	}

	dissector = kzalloc(sizeof(*dissector), GFP_KERNEL);
	if (!dissector) {


