static inline u16 mlx5_min_rx_wqes(int wq_type, u32 wq_size)	}
}

/* Use this function to get max num channels (rxqs/txqs) only to create netdev */
static inline int mlx5e_get_max_num_channels(struct mlx5_core_dev *mdev)
{
	return is_kdump_kernel() ?

static inline int mlx5e_get_max_num_channels(struct mlx5_core_dev *mdev)		      MLX5E_MAX_NUM_CHANNELS);
}

/* Use this function to get max num channels after netdev was created */
static inline int mlx5e_get_netdev_max_channels(struct net_device *netdev)
{
	return min_t(unsigned int, netdev->num_rx_queues,
		     netdev->num_tx_queues);
}

struct mlx5e_tx_wqe {
	struct mlx5_wqe_ctrl_seg ctrl;
	struct mlx5_wqe_eth_seg  eth;

struct mlx5e_profile {	void	(*disable)(struct mlx5e_priv *priv);
	void	(*update_stats)(struct mlx5e_priv *priv);
	void	(*update_carrier)(struct mlx5e_priv *priv);
	int	(*max_nch)(struct mlx5_core_dev *mdev);
	struct {
		mlx5e_fp_handle_rx_cqe handle_rx_cqe;
		mlx5e_fp_handle_rx_cqe handle_rx_cqe_mpwqe;

int mlx5e_netdev_init(struct net_device *netdev,void mlx5e_netdev_cleanup(struct net_device *netdev, struct mlx5e_priv *priv);
struct net_device*
mlx5e_create_netdev(struct mlx5_core_dev *mdev, const struct mlx5e_profile *profile,
		    void *ppriv);
		    int nch, void *ppriv);
int mlx5e_attach_netdev(struct mlx5e_priv *priv);
void mlx5e_detach_netdev(struct mlx5e_priv *priv);
void mlx5e_destroy_netdev(struct mlx5e_priv *priv);

static int mlx5e_set_ringparam(struct net_device *dev,void mlx5e_ethtool_get_channels(struct mlx5e_priv *priv,
				struct ethtool_channels *ch)
{
	ch->max_combined   = priv->profile->max_nch(priv->mdev);
	ch->max_combined   = mlx5e_get_netdev_max_channels(priv->netdev);
	ch->combined_count = priv->channels.params.num_channels;
}


static int mlx5e_open_sqs(struct mlx5e_channel *c,			  struct mlx5e_channel_param *cparam)
{
	struct mlx5e_priv *priv = c->priv;
	int err, tc, max_nch = priv->profile->max_nch(priv->mdev);
	int err, tc, max_nch = mlx5e_get_netdev_max_channels(priv->netdev);

	for (tc = 0; tc < params->num_tc; tc++) {
		int txq_ix = c->ix + tc * max_nch;

int mlx5e_create_direct_rqts(struct mlx5e_priv *priv)	int err;
	int ix;

	for (ix = 0; ix < priv->profile->max_nch(priv->mdev); ix++) {
	for (ix = 0; ix < mlx5e_get_netdev_max_channels(priv->netdev); ix++) {
		rqt = &priv->direct_tir[ix].rqt;
		err = mlx5e_create_rqt(priv, 1 /*size */, rqt);
		if (err)

void mlx5e_destroy_direct_rqts(struct mlx5e_priv *priv){
	int i;

	for (i = 0; i < priv->profile->max_nch(priv->mdev); i++)
	for (i = 0; i < mlx5e_get_netdev_max_channels(priv->netdev); i++)
		mlx5e_destroy_rqt(priv, &priv->direct_tir[i].rqt);
}


static void mlx5e_redirect_rqts(struct mlx5e_priv *priv,		mlx5e_redirect_rqt(priv, rqtn, MLX5E_INDIR_RQT_SIZE, rrp);
	}

	for (ix = 0; ix < priv->profile->max_nch(priv->mdev); ix++) {
	for (ix = 0; ix < mlx5e_get_netdev_max_channels(priv->netdev); ix++) {
		struct mlx5e_redirect_rqt_param direct_rrp = {
			.is_rss = false,
			{

static int mlx5e_modify_tirs_lro(struct mlx5e_priv *priv)			goto free_in;
	}

	for (ix = 0; ix < priv->profile->max_nch(priv->mdev); ix++) {
	for (ix = 0; ix < mlx5e_get_netdev_max_channels(priv->netdev); ix++) {
		err = mlx5_core_modify_tir(mdev, priv->direct_tir[ix].tirn,
					   in, inlen);
		if (err)

static void mlx5e_netdev_set_tcs(struct net_device *netdev)
static void mlx5e_build_tc2txq_maps(struct mlx5e_priv *priv)
{
	int max_nch = priv->profile->max_nch(priv->mdev);
	int max_nch = mlx5e_get_netdev_max_channels(priv->netdev);
	int i, tc;

	for (i = 0; i < max_nch; i++)

int mlx5e_create_indirect_tirs(struct mlx5e_priv *priv, bool inner_ttc)
int mlx5e_create_direct_tirs(struct mlx5e_priv *priv)
{
	int nch = priv->profile->max_nch(priv->mdev);
	int nch = mlx5e_get_netdev_max_channels(priv->netdev);
	struct mlx5e_tir *tir;
	void *tirc;
	int inlen;

void mlx5e_destroy_indirect_tirs(struct mlx5e_priv *priv, bool inner_ttc)
void mlx5e_destroy_direct_tirs(struct mlx5e_priv *priv)
{
	int nch = priv->profile->max_nch(priv->mdev);
	int nch = mlx5e_get_netdev_max_channels(priv->netdev);
	int i;

	for (i = 0; i < nch; i++)

static int mlx5e_nic_init(struct mlx5_core_dev *mdev,		return err;

	mlx5e_build_nic_params(mdev, &priv->channels.params,
			       profile->max_nch(mdev), netdev->mtu);
			       mlx5e_get_netdev_max_channels(netdev), netdev->mtu);

	mlx5e_timestamp_init(priv);


static const struct mlx5e_profile mlx5e_nic_profile = {	.enable		   = mlx5e_nic_enable,
	.disable	   = mlx5e_nic_disable,
	.update_stats	   = mlx5e_update_ndo_stats,
	.max_nch	   = mlx5e_get_max_num_channels,
	.update_carrier	   = mlx5e_update_carrier,
	.rx_handlers.handle_rx_cqe       = mlx5e_handle_rx_cqe,
	.rx_handlers.handle_rx_cqe_mpwqe = mlx5e_handle_rx_cqe_mpwrq,

void mlx5e_netdev_cleanup(struct net_device *netdev, struct mlx5e_priv *priv)
struct net_device *mlx5e_create_netdev(struct mlx5_core_dev *mdev,
				       const struct mlx5e_profile *profile,
				       int nch,
				       void *ppriv)
{
	int nch = profile->max_nch(mdev);
	struct net_device *netdev;
	int err;


static void *mlx5e_add(struct mlx5_core_dev *mdev)	void *rpriv = NULL;
	void *priv;
	int err;
	int nch;

	err = mlx5e_check_required_hca_cap(mdev);
	if (err)

static void *mlx5e_add(struct mlx5_core_dev *mdev)	}
#endif

	netdev = mlx5e_create_netdev(mdev, &mlx5e_nic_profile, rpriv);
	nch = mlx5e_get_max_num_channels(mdev);
	netdev = mlx5e_create_netdev(mdev, &mlx5e_nic_profile, nch, rpriv);
	if (!netdev) {
		mlx5_core_err(mdev, "mlx5e_create_netdev failed\n");
		goto err_free_rpriv;

static int mlx5e_init_rep(struct mlx5_core_dev *mdev,		return err;


	priv->channels.params.num_channels = profile->max_nch(mdev);
	priv->channels.params.num_channels =
				mlx5e_get_netdev_max_channels(netdev);

	mlx5e_build_rep_params(mdev, &priv->channels.params, netdev->mtu);
	mlx5e_build_rep_netdev(netdev);

static const struct mlx5e_profile mlx5e_rep_profile = {	.init_tx		= mlx5e_init_rep_tx,
	.cleanup_tx		= mlx5e_cleanup_nic_tx,
	.update_stats           = mlx5e_rep_update_hw_counters,
	.max_nch		= mlx5e_get_max_num_channels,
	.update_carrier		= NULL,
	.rx_handlers.handle_rx_cqe       = mlx5e_handle_rx_cqe_rep,
	.rx_handlers.handle_rx_cqe_mpwqe = mlx5e_handle_rx_cqe_mpwrq,

mlx5e_vport_rep_load(struct mlx5_core_dev *dev, struct mlx5_eswitch_rep *rep)	struct mlx5e_rep_priv *rpriv;
	struct net_device *netdev;
	struct mlx5e_priv *upriv;
	int err;
	int nch, err;

	rpriv = kzalloc(sizeof(*rpriv), GFP_KERNEL);
	if (!rpriv)
		return -ENOMEM;

	netdev = mlx5e_create_netdev(dev, &mlx5e_rep_profile, rpriv);
	nch = mlx5e_get_max_num_channels(dev);
	netdev = mlx5e_create_netdev(dev, &mlx5e_rep_profile, nch, rpriv);
	if (!netdev) {
		pr_warn("Failed to create representor netdev for vport %d\n",
			rep->vport);

void mlx5e_grp_sw_update_stats(struct mlx5e_priv *priv)
	memset(s, 0, sizeof(*s));

	for (i = 0; i < priv->profile->max_nch(priv->mdev); i++) {
	for (i = 0; i < mlx5e_get_netdev_max_channels(priv->netdev); i++) {
		struct mlx5e_channel_stats *channel_stats =
			&priv->channel_stats[i];
		struct mlx5e_xdpsq_stats *xdpsq_red_stats = &channel_stats->xdpsq;

static const struct counter_desc ch_stats_desc[] = {
static int mlx5e_grp_channels_get_num_stats(struct mlx5e_priv *priv)
{
	int max_nch = priv->profile->max_nch(priv->mdev);
	int max_nch = mlx5e_get_netdev_max_channels(priv->netdev);

	return (NUM_RQ_STATS * max_nch) +
	       (NUM_CH_STATS * max_nch) +

static int mlx5e_grp_channels_get_num_stats(struct mlx5e_priv *priv)static int mlx5e_grp_channels_fill_strings(struct mlx5e_priv *priv, u8 *data,
					   int idx)
{
	int max_nch = priv->profile->max_nch(priv->mdev);
	int max_nch = mlx5e_get_netdev_max_channels(priv->netdev);
	int i, j, tc;

	for (i = 0; i < max_nch; i++)

static int mlx5e_grp_channels_fill_strings(struct mlx5e_priv *priv, u8 *data,static int mlx5e_grp_channels_fill_stats(struct mlx5e_priv *priv, u64 *data,
					 int idx)
{
	int max_nch = priv->profile->max_nch(priv->mdev);
	int max_nch = mlx5e_get_netdev_max_channels(priv->netdev);
	int i, j, tc;

	for (i = 0; i < max_nch; i++)

int mlx5i_init(struct mlx5_core_dev *mdev,	netdev->mtu = max_mtu;

	mlx5e_build_nic_params(mdev, &priv->channels.params,
			       profile->max_nch(mdev), netdev->mtu);
			       mlx5e_get_netdev_max_channels(netdev),
			       netdev->mtu);
	mlx5i_build_nic_params(mdev, &priv->channels.params);

	mlx5e_timestamp_init(priv);

void mlx5i_cleanup(struct mlx5e_priv *priv)
static void mlx5i_grp_sw_update_stats(struct mlx5e_priv *priv)
{
	int max_nch = mlx5e_get_netdev_max_channels(priv->netdev);
	struct mlx5e_sw_stats s = { 0 };
	int i, j;

	for (i = 0; i < priv->profile->max_nch(priv->mdev); i++) {
	for (i = 0; i < max_nch; i++) {
		struct mlx5e_channel_stats *channel_stats;
		struct mlx5e_rq_stats *rq_stats;


static const struct mlx5e_profile mlx5i_nic_profile = {	.enable		   = NULL, /* mlx5i_enable */
	.disable	   = NULL, /* mlx5i_disable */
	.update_stats	   = NULL, /* mlx5i_update_stats */
	.max_nch	   = mlx5e_get_max_num_channels,
	.update_carrier    = NULL, /* no HW update in IB link */
	.rx_handlers.handle_rx_cqe       = mlx5i_handle_rx_cqe,
	.rx_handlers.handle_rx_cqe_mpwqe = NULL, /* Not supported */

int mlx5_rdma_rn_get_params(struct mlx5_core_dev *mdev,	if (rc)
		return rc;

	nch = mlx5_get_profile(mdev)->max_nch(mdev);
	nch = mlx5e_get_max_num_channels(mdev);

	*params = (struct rdma_netdev_alloc_params){
		.sizeof_priv = sizeof(struct mlx5i_priv) +

static const struct mlx5e_profile mlx5i_pkey_nic_profile = {	.enable		   = NULL,
	.disable	   = NULL,
	.update_stats	   = NULL,
	.max_nch	   = mlx5e_get_max_num_channels,
	.rx_handlers.handle_rx_cqe       = mlx5i_handle_rx_cqe,
	.rx_handlers.handle_rx_cqe_mpwqe = NULL, /* Not supported */
	.max_tc		   = MLX5I_MAX_NUM_TC,


